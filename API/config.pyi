from typing import Any, Literal
from pathlib import Path


class Config:
    """
    Класс для работы с конфигурацией плагина в формате TOML.

    Автоматически загружает конфиг из файла <config_name>.toml рядом с указанным путем.
    Если файл не найден или поврежден, создает новый с дефолтными значениями.
    Предоставляет доступ к параметрам конфига как к атрибутам класса.
    """
    
    def __init__(
            self,
            path: str | Path,
            plugin_type: Literal["draggable_window", "overlay_widget"],
            config_name: str = "config",
            create_is_not: bool = True
    ) -> None:
        """
        Инициализирует конфигурацию плагина.

        Args:
            path: Путь, относительно которого ищется конфиг (в родительской директории)
            plugin_type: Тип плагина (определяет набор дефолтных значений)
            config_name: Имя конфигурационного файла (без расширения)
            create_is_not: Создавать ли новый конфиг, если файл не найден
        """
        ...
    
    def __getattr__(self, item: str) -> Any:
        """Проксирует доступ к атрибутам внутреннего конфига."""
        ...
    
    def reload(self) -> None:
        """Перезагружает конфигурацию из файла."""
        ...
    
    def plugin_path(self) -> Path:
        """
        Возвращает путь к директории плагина.

        Returns:
            Path: Абсолютный путь к родительской директории
        """
        ...